# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'predict_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import multiprocessing

import os, sys
import cv2
import torch
import torchvision
from mxnet import image
import numpy as np

from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

import dialog
import get_net
import loadARP
from predict_terminal import ARP_predict, rcnn_predict

ARP_MODEL_NAME = 'res34_cbam_parallel'
ARP_PATH = '../param/res34_bcam_parallel_625_0.2043_0.945_9.74.params'
SHADOW_PERCENT = 0.5

NUM_CLASS = 10
DEVICE = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
RCNN_MODEL = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=False, num_classes=NUM_CLASS)
RCNN_PATH = '../param/model_new_1.pth'
PARAMS = {}


class msg_dialog(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.msg_dialog = dialog.Ui_Dialog()
        self.msg_dialog.setupUi(self)


class Ui_ShadowRCNN(QWidget):
    def setupUi(self, ShadowRCNN):
        ShadowRCNN.setObjectName("ShadowRCNN")
        ShadowRCNN.resize(1600, 900)
        self.centralwidget = QtWidgets.QWidget(ShadowRCNN)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(160, 40, 1280, 720))
        self.label.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label.setStyleSheet("QLabel{background:white;}"
                                 "QLabel{color:rgb(300,300,300,120);font-size:20px;font-weight:bold;}"
                                 )

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(100, 790, 161, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.openimage)

        self.pushButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton1.setGeometry(QtCore.QRect(361, 790, 161, 41))
        self.pushButton1.setObjectName("pushButton")
        self.pushButton1.clicked.connect(self.predict)


        ShadowRCNN.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ShadowRCNN)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1600, 26))
        self.menubar.setAutoFillBackground(False)
        self.menubar.setObjectName("menubar")
        ShadowRCNN.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ShadowRCNN)
        self.statusbar.setObjectName("statusbar")
        ShadowRCNN.setStatusBar(self.statusbar)

        self.retranslateUi(ShadowRCNN)
        QtCore.QMetaObject.connectSlotsByName(ShadowRCNN)

    def retranslateUi(self, ShadowRCNN):
        _translate = QtCore.QCoreApplication.translate
        ShadowRCNN.setWindowTitle(_translate("ShadowRCNN", "ShadowRCNN"))
        self.label.setText(_translate("ShadowRCNN", "请选择图片"))
        self.pushButton.setText(_translate("ShadowRCNN", "选择图片"))
        self.pushButton1.setText(_translate("ShadowRCNN", "开始预测"))

    def openimage(self):
        imgName, imgType = QFileDialog.getOpenFileName(QWidget(), "打开图片", "D:\python\projects\shadow_maskrcnn\images", "*.png;;*.jpg;;All Files(*)")
        jpg = QtGui.QPixmap(imgName).scaled(self.label.width(), self.label.height())
        if imgName != '':
            self.label.setPixmap(jpg)
            self.statusbar.showMessage('当前图片：' + imgName)
        PARAMS['imgPath'] = imgName

    def ARP_predict(self):
        manager = multiprocessing.Manager()
        return_dict = manager.dict()
        p = multiprocessing.Process(target=ARP_predict,
                                    args=(return_dict, PARAMS['imgPath'], ARP_MODEL_NAME, ARP_PATH, SHADOW_PERCENT))
        p.start()
        p.join()

        PARAMS['ARP_result'] = return_dict.values()[0]
        shadow_write_path, shadow_write_name = os.path.split(PARAMS['imgPath'])
        shadow_write_name = shadow_write_name.split('.')[0] + '_shadow' + '.' + shadow_write_name.split('.')[1]
        shadow_write_path = os.path.join(shadow_write_path, shadow_write_name)
        cv2.imwrite(shadow_write_path, PARAMS['ARP_result'])
        if 'shadow_write_path' not in PARAMS.keys():
            PARAMS['shadow_write_path'] = []
        PARAMS['shadow_write_path'].append(shadow_write_path)
        jpg = QtGui.QPixmap(shadow_write_path).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(jpg)

    def rcnn_predict(self):
        manager = multiprocessing.Manager()
        return_dict = manager.dict()
        p = multiprocessing.Process(target=rcnn_predict, args=(return_dict, PARAMS['ARP_result'], False, RCNN_PATH))
        p.start()
        p.join()

        PARAMS['RCNN_result'] = return_dict.values()[0]
        rcnn_write_path, rcnn_write_name = os.path.split(PARAMS['imgPath'])
        rcnn_write_name = rcnn_write_name.split('.')[0] + '_rcnn' + '.' + rcnn_write_name.split('.')[1]
        rcnn_write_path = os.path.join(rcnn_write_path, rcnn_write_name)
        cv2.imwrite(rcnn_write_path, PARAMS['RCNN_result'])
        if 'rcnn_write_path' not in PARAMS.keys():
            PARAMS['rcnn_write_path'] = []
        PARAMS['rcnn_write_path'].append(rcnn_write_path)
        jpg = QtGui.QPixmap(rcnn_write_path).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(jpg)

    def predict(self):
        if 'imgPath' in PARAMS.keys():
            msgDialog = msg_dialog()
            msgDialog.show()
            self.ARP_predict()
            self.rcnn_predict()
            self.statusbar.showMessage('预测完成')
        else:
            msg = QMessageBox.information(self, '提示', '请先选择图片', QMessageBox.Yes, QMessageBox.Yes)


